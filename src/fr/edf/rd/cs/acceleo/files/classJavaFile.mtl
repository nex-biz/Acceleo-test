[comment encoding = UTF-8 /]
[**
 * The documentation of the module classJavaFile.
 */]
[module classJavaFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fr::edf::rd::cs::acceleo::files::fileUtils /]

[**
 * The documentation of the template genClassJavaFile.
 * @param aClass
 */]
[template public genClassJavaFile(aClass : Class, aModel : Model)]
[file (aClass.genFilePath(), false, 'UTF-8')]
[aClass.genCopyrightHeader()/]
package [aClass.genPackageValue()/];

[aClass.genDefaultImport()/]

/**
 * The documentation of the class [aClass.name.toUpperFirst()/]
 *
 * @generated
 */
public class [aClass.name.toUpperFirst()/][aClass.inheritance()/] {
	[aClass.fieldAssociations( aModel )/]
	[aClass.fields()/]
	/**
	 * The documentation of the constructor.
	 * 
	 * @generated
	 */
	public [aClass.name.toUpperFirst()/]() {
		super();
	}
	[aClass.classBody(aModel)/]
}
[/file]
[/template]

[template private classBody(aClass : Class, aModel : Model) post(trim())]

[aClass.operations()/]
[aClass.accessors()/]
[aClass.accessorAssociations(aModel)/]

[/template]

[template private inheritance(aClass : Class)]
[aClass.extendedClasses()/][aClass.implementedInterfaces()/]
[/template]

[template private extendedClasses(aClass : Class)]
[for (aSuperClass : Class | aClass.superClass) before(' extends ') separator(', ')][aSuperClass.name.toUpperFirst()/][/for]
[/template]

[template private implementedInterfaces(aClass : Class)]
[for (anInterface : Interface | aClass.getImplementedInterfaces()) before(' implements ') separator(', ')][anInterface.name.toUpperFirst()/][/for]
[/template]

[template private fields(aClass : Class)]
[for (aProperty : Property | aClass.attribute)]
/**
 * The documentation of the attribute [aProperty.name.toLowerFirst()/].
 * 
 * @generated
 */
private [if (aProperty.upper = -1 or aProperty.upper > 1)]List<String>[else][aProperty.type.name.toUpperFirst()/][/if] [aProperty.name.toLowerFirst()/];

[/for]
[/template]

[template private operations(aClass : Class)]
[for (anOperation : Operation | aClass.getOperations()->union(aClass.getImplementedInterfaces().ownedOperation))]
/**
 * The documentation of the method [anOperation.name.toLowerFirst()/].
 * [for (aComment : Comment | anOperation.ownedComment)] [aComment._body/][/for]
[for (aParameter : Parameter | anOperation.ownedParameter) ? (aParameter.direction <> ParameterDirectionKind::return)]
 * @param [aParameter.name/]
[/for]
[if (not anOperation.type.oclIsUndefined())]
 * @return
[/if]
 * 
 * @generated
 */
public [if (anOperation.type.oclIsUndefined())]void[else][anOperation.type.name/][/if] [anOperation.name.toLowerFirst()/]([anOperation.parameters()/]) {
	// [protected ('for the body of ' + anOperation.name.toLowerFirst())]
	// TODO should be implemented
	[if (not anOperation.type.oclIsUndefined())]
	return null;
	[/if]
	// [/protected]
}

[/for]
[/template]

[template private parameters(anOperation : Operation)]
[for (aParameter : Parameter | anOperation.ownedParameter->reject(aParameter : Parameter | aParameter.direction = ParameterDirectionKind::return)) separator(', ')][aParameter.type.name.toUpperFirst()/] [aParameter.name.toLowerFirst()/][/for]
[/template]

[query private allAbstractOperationsInherited(aClass : Class) : Sequence(Operation) =
	aClass.superClass.ownedOperation->select(anOperation: Operation | anOperation.isAbstract)->asSequence()
/]

[template private accessors(aClass : Class)]
[for (aProperty : Property | aClass.attribute)]
/**
 * The documentation of the getter get[aProperty.name.toUpperFirst()/].
 * 
 * @generated
 */
public [if (aProperty.upper = -1 or aProperty.upper > 1)]List<String>[else][aProperty.type.name.toUpperFirst()/][/if] get[aProperty.name.toUpperFirst()/]() {
	return this.[aProperty.name.toLowerFirst()/];
}

/**
 * The documentation of the setter set[aProperty.name.toUpperFirst()/].
 * 
 * @generated
 */
public void set[aProperty.name.toUpperFirst()/]([if (aProperty.upper = -1 or aProperty.upper > 1)]List<String>[else][aProperty.type.name.toUpperFirst()/][/if] new[aProperty.name.toUpperFirst()/]) {
	this.[aProperty.name.toLowerFirst()/] = new[aProperty.name.toUpperFirst()/];
}

[/for]
[/template]

[template private associations(aClass : Class)]
[for (aProperty : Property | aClass.attribute)]
/**
 * associations get[aProperty.name.toUpperFirst()/].
 * 
 * @generated
 */
public [if (aProperty.upper = -1 or aProperty.upper > 1)]List<String>[else][aProperty.type.name.toUpperFirst()/][/if] get[aProperty.name.toUpperFirst()/]() {
	return this.[aProperty.name.toLowerFirst()/];
}

/**
 * associations set[aProperty.name.toUpperFirst()/].
 * 
 * @generated
 */
public void set[aProperty.name.toUpperFirst()/]([if (aProperty.upper = -1 or aProperty.upper > 1)]List<String>[else][aProperty.type.name.toUpperFirst()/][/if] new[aProperty.name.toUpperFirst()/]) {
	this.[aProperty.name.toLowerFirst()/] = new[aProperty.name.toUpperFirst()/];
}

[/for]
[/template]


[**
 * TEST EN COURS
*/]

[template private fieldOwnedAssociations(aClass : Class)]
/**
 * ###### fieldAssociations
 */
[for (aRelationship : Relationship | aClass.getRelationships()->select( aAssociation : Relationship | aAssociation.oclIsTypeOf(Association) ) )]
/**
 * aRelationship.toString(): [aRelationship.toString()/].
 * aRelationship.owner.toString(): [aRelationship.owner.toString()/].
 * aRelationship.relatedElement.toString(): [aRelationship.relatedElement.toString()/].
 * aRelationship.eContainer().toString(): [aRelationship.eContainer().toString()/].
 * aRelationship.ownedElement().toString(): [aRelationship.ownedElement.toString()/].
 * aRelationship.eClass().eAllReferences.toString(): [aRelationship.eClass().eAllReferences.toString()/].
 * aRelationship.getSourceDirectedRelationships().toString(): [aRelationship.getSourceDirectedRelationships().toString()/].
 * aRelationship.getTargetDirectedRelationships().toString(): [aRelationship.getTargetDirectedRelationships().toString()/].
 * aRelationship.eCrossReferences(): [aClass.eCrossReferences()/].
 * aRelationship.eCrossReferences(): [aClass.getAssociations()/].
 */
[/for]
[for (aAssociation : Association | aClass.getAssociations()->select( aAssociation : Association | aAssociation.oclIsTypeOf(Association) ) )]
/**
 * aAssociation.toString(): [aAssociation.toString()/].
 * aAssociation.owner.toString(): [aAssociation.owner.toString()/].
 * aAssociation.relatedElement.toString(): [aAssociation.relatedElement.toString()/].
 * aAssociation.eContainer().toString(): [aAssociation.eContainer().toString()/].
 * aAssociation.ownedElement().toString(): [aAssociation.ownedElement.toString()/].
 * aAssociation.eClass().eAllReferences.toString(): [aAssociation.eClass().eAllReferences.toString()/].
 * aAssociation.getSourceDirectedRelationships().toString(): [aAssociation.getSourceDirectedRelationships().toString()/].
 * aAssociation.getTargetDirectedRelationships().toString(): [aAssociation.getTargetDirectedRelationships().toString()/].
 * aAssociation.endType().toString(): [aAssociation.endType.toString()/].
 * aAssociation.memberEnd().toString(): [aAssociation.memberEnd.toString()/].
 */
[/for]
[/template]


[template private fieldAssociations(aClass : Class, aModel : Model)]
[for (aType : Type | aModel.eAllContents(Package).ownedType)]
[if (aType.oclIsKindOf(Association))]
[aType.oclAsType(Association).genAssociationField( aClass )/]
[/if]
[/for]
[/template]


[template private accessorAssociations(aClass : Class, aModel : Model)]
[for (aType : Type | aModel.eAllContents(Package).ownedType)]
[if (aType.oclIsKindOf(Association))]
[aType.oclAsType(Association).genAssociationAccessor( aClass )/]
[/if]
[/for]
[/template]


[template private genAssociationField(aAssociation : Association, aClass : Class)]
	[for (aProperty : Property | aAssociation.ownedElement)]	
		[if ( aClass.name = aProperty.type.name )]

/**
 * The documentation of the Association field.
 * 
 * @generated
 */
			[if ( aProperty.siblings()->at(1).oclAsType( Property ).upper = -1 )]
List<[ aProperty.siblings()->at(1).oclAsType( Property ).type.name /]> [ aProperty.siblings()->at(1).oclAsType( Property ).name /];
			[else]
[ aProperty.siblings()->at(1).oclAsType( Property ).type.name /] [ aProperty.siblings()->at(1).oclAsType( Property ).name /];
			[/if]
		[else]
		[/if]
	[/for]

[/template]


[template private genAssociationAccessor(aAssociation : Association, aClass : Class)]
	[for (aProperty : Property | aAssociation.ownedElement)]	
		[if ( aClass.name = aProperty.type.name )]
/**
 * The documentation of the associations get[aProperty.siblings()->at(1).oclAsType( Property ).name.toUpperFirst()/].
 * 
 * @generated
 */
public [if (aProperty.siblings()->at(1).oclAsType( Property ).upper = -1 )]List<[ aProperty.siblings()->at(1).oclAsType( Property ).type.name /]>[else][aProperty.siblings()->at(1).oclAsType( Property ).type.name/][/if] get[aProperty.siblings()->at(1).oclAsType( Property ).name.toUpperFirst()/]() {
	return this.[aProperty.siblings()->at(1).oclAsType( Property ).name.toLowerFirst()/];
}

/**
 * The documentation of the associations set[aProperty.siblings()->at(1).oclAsType( Property ).name.toUpperFirst()/].
 * 
 * @generated
 */
public void set[aProperty.siblings()->at(1).oclAsType( Property ).name.toUpperFirst()/]([if (aProperty.siblings()->at(1).oclAsType( Property ).upper = -1 )]List<[ aProperty.siblings()->at(1).oclAsType( Property ).type.name /]>[else][aProperty.siblings()->at(1).oclAsType( Property ).type.name/][/if] new[aProperty.siblings()->at(1).oclAsType( Property ).name.toUpperFirst()/]) {
	this.[aProperty.siblings()->at(1).oclAsType( Property ).name.toLowerFirst()/] = new[aProperty.siblings()->at(1).oclAsType( Property ).name.toUpperFirst()/];
}
		[else]
		[/if]
	[/for]

[/template]
