[comment encoding = UTF-8 /]
[**
 * The documentation of the module classJavaFile.
 */]
[module attributeClassEcore('http://www.eclipse.org/emf/2002/Ecore')]

[import fr::edf::rd::cs::acceleo::files::ecore::fileUtilsEcore /]
[import fr::edf::rd::cs::acceleo::files::ecore::jpaCommonEcore /]
[import fr::edf::rd::cs::acceleo::files::ecore::jpaAnnotationEcore /]
[import fr::edf::rd::cs::acceleo::files::ecore::jpaRepositoryEcore /]



[template private checkForbidenNameL(aName : EString)]
[if (aName.equalsIgnoreCase('private'))]private_[elseif (aName.equalsIgnoreCase('transient'))]transient_[else][aName.toLowerFirst()/][/if]
[/template]

[template private checkForbidenNameU(aName : EString)]
[if (aName.equalsIgnoreCase('private'))]Private_[elseif (aName.equalsIgnoreCase('transient'))]Transient_[else][aName.toUpperFirst()/][/if]
[/template]

[template public fieldsForConcreteClass(aClass : EClassifier)]
[for (aProperty : EAttribute | aClass.oclAsType(EClass).eAttributes)]
[if( not( aProperty.genNameForAttribute().equalsIgnoreCase('EFeatureMapEntry') ) )]

/**
 * The documentation of the attribute [aProperty.name.checkForbidenNameL()/].
 * 
 * @generated
 */
[aProperty.genJpaAnnotAttribute(aClass)/]
[if(aProperty.name.equalsIgnoreCase('DESC'))]
@Transient
[/if]
private [if (aProperty.upperBound = -1 or aProperty.upperBound > 1)]List<[aProperty.genNameForAttribute()/]>[else][aProperty.genNameForAttribute()/][/if] [aProperty.name.checkForbidenNameL()/];
[/if]
[/for]

[/template]


[template public fieldsFromParentForConcreteClass(aClass : EClassifier)]
[for (aSuperType : EClass | aClass.oclAsType(EClass).eSuperTypes->select( var1 : EClass | var1.name.startsWith('Ag') ) )]
		[aSuperType.name.log(' aSuperType :')/]
		[aSuperType.fieldsForConcreteClass()/]
	[for (aSuperType2 : EClass | aSuperType.oclAsType(EClass).eAllSuperTypes)]
		[aSuperType2.name.log('    aSuperType2 :')/]
[aSuperType2.fieldsForConcreteClass()/]
	[/for]
[/for]
[/template]



[template public associationsForConcreteClass(aClass : EClassifier)]
[for (aProperty : EReference | aClass.oclAsType(EClass).eReferences)]
[if( not( aProperty.genNameForAttribute().equalsIgnoreCase('EFeatureMapEntry') ) )]

/**
 * The documentation of the reference [aProperty.name.checkForbidenNameL()/].
 *
 * @generated
 */
[aProperty.genJpaAnnotAttribute(aClass)/]
private [if (true or aProperty.upperBound = -1 or aProperty.upperBound > 1)]List<[aProperty.genNameForAttribute()/]>[else][aProperty.genNameForAttribute()/][/if] [aProperty.name.checkForbidenNameL()/][if (true or aProperty.upperBound = -1 or aProperty.upperBound > 1)] = new ArrayList<>()[/if];
[/if]
[/for]
[/template]



[template public fieldsAccessorsForConcreteClass(aClass : EClassifier)]
[for (aProperty : EAttribute | aClass.oclAsType(EClass).eAttributes)]
[if( not( aProperty.genNameForAttribute().equalsIgnoreCase('EFeatureMapEntry') ) )]

/**
 * The documentation of the getter get[aProperty.name.checkForbidenNameU()/].
 *
 * @generated
 */
public [if (aProperty.upperBound = -1 or aProperty.upperBound > 1)]List<[aProperty.genNameForAttribute()/]>[else][aProperty.genNameForAttribute()/][/if] get[aProperty.name.checkForbidenNameU()/]() {
	return this.[aProperty.name.checkForbidenNameL()/];
}

/**
 * The documentation of the setter set[aProperty.name.checkForbidenNameU()/].
 *
 * @generated
 */
public void set[aProperty.name.checkForbidenNameU()/]([if (aProperty.upperBound = -1 or aProperty.upperBound > 1)]List<[aProperty.genNameForAttribute()/]>[else][aProperty.genNameForAttribute()/][/if] new[aProperty.name.checkForbidenNameU()/]) {
	this.[aProperty.name.checkForbidenNameL()/] = new[aProperty.name.checkForbidenNameU()/];
}
[/if]
[/for]

[if(aClass.name.equalsIgnoreCase('terminal'))]
/**
 * The documentation of the getter getElecConnectedTo.
 *
 * @generated
 */
  public String getElecConnectedTo() {
     return this.elecConnectedTo;
  }

/**
 * The documentation of the setter setElecConnectedTo.
 *
 * @generated
 */
 public void setElecConnectedTo(String elecConnectedTo) {
    this.elecConnectedTo = elecConnectedTo;
 }

 /**
  * The documentation of the getter isUsed.
  *
  * @generated
  */
   public Boolean isUsed() {
      return this.used;
   }

 /**
  * The documentation of the setter setUsed.
  *
  * @generated
  */
  public void setUsed(Boolean used) {
     this.used = used;
  }

 [/if]

[if(aClass.name.equalsIgnoreCase('bay'))]
/**
 * The documentation of the getter bayOrderNumbInSingleLineDiagram.
 *
 * @generated
 */
  public int getBayOrderNumbInSingleLineDiagram() {
     return this.bayOrderNumbInSingleLineDiagram;
  }

/**
 * The documentation of the setter bayOrderNumbInSingleLineDiagram.
 *
 * @generated
 */
 public void setBayOrderNumbInSingleLineDiagram(int bayOrderNumbInSingleLineDiagram) {
    this.bayOrderNumbInSingleLineDiagram = bayOrderNumbInSingleLineDiagram;
 }

 /**
  * The documentation of the getter busBar.
  *
  * @generated
  */
   public String getBusBar() {
      return this.busBar;
   }

 /**
  * The documentation of the setter busBar.
  *
  * @generated
  */
  public void setBusBar(String busBar) {
     this.busBar = busBar;
  }

[/if]

[if(aClass.name.equalsIgnoreCase('bay') or aClass.name.equalsIgnoreCase('powertransformer') or aClass.name.equalsIgnoreCase('transformerwinding') or aClass.name.equalsIgnoreCase('conductingequipment') or aClass.name.equalsIgnoreCase('voltagelevel') or aClass.name.equalsIgnoreCase('tapchanger') or aClass.name.equalsIgnoreCase('subequipment'))]
/**
 * The documentation of the getter xCoordinateInLibSchema.
 *
 * @generated
 */
  public float getXCoordinateInLibSchema() {
     return this.xCoordinateInLibSchema;
  }

/**
 * The documentation of the setter xCoordinateInLibSchema.
 *
 * @generated
 */
 public void setXCoordinateInLibSchema(float xCoordinateInLibSchema) {
    this.xCoordinateInLibSchema = xCoordinateInLibSchema;
 }

 /**
  * The documentation of the getter yCoordinateInLibSchema.
  *
  * @generated
  */
   public float getYCoordinateInLibSchema() {
      return this.yCoordinateInLibSchema;
   }

 /**
  * The documentation of the setter yCoordinateInLibSchema.
  *
  * @generated
  */
  public void setYCoordinateInLibSchema(float yCoordinateInLibSchema) {
     this.yCoordinateInLibSchema = yCoordinateInLibSchema;
  }

[/if]
[/template]



[template public fieldsAccessorsFromParentForConcreteClass(aClass : EClassifier)]
[for (aSuperType : EClass | aClass.oclAsType(EClass).eSuperTypes->select( var1 : EClass | var1.name.startsWith('Ag') ) )]
[aSuperType.fieldsAccessorsForConcreteClass()/]
[for (aSuperType2 : EClass | aSuperType.oclAsType(EClass).eAllSuperTypes)]
[aSuperType2.fieldsAccessorsForConcreteClass()/]
[/for]
[/for]
[/template]



[template public associationsAccessorsForConcreteClass(aClass : EClassifier)]
[for (aProperty : EReference | aClass.oclAsType(EClass).eReferences)]
[if( not( aProperty.genNameForAttribute().equalsIgnoreCase('EFeatureMapEntry') ) )]

/**
 * associations get[aProperty.name.checkForbidenNameU()/].
 * 
 * @generated
 */
public [if (true or aProperty.upperBound = -1 or aProperty.upperBound > 1)]List<[aProperty.genNameForAttribute()/]>[else][aProperty.genNameForAttribute()/][/if] get[aProperty.name.checkForbidenNameU()/]() {
	return this.[aProperty.name.checkForbidenNameL()/];
}

/**
 * associations set[aProperty.name.checkForbidenNameU()/].
 * 
 * @generated
 */
public void set[aProperty.name.toUpperFirst()/]([if (true or aProperty.upperBound = -1 or aProperty.upperBound > 1)]List<[aProperty.genNameForAttribute()/]>[else][aProperty.genNameForAttribute()/][/if] new[aProperty.name.checkForbidenNameU()/]) {
	this.[aProperty.name.checkForbidenNameL()/] = new[aProperty.name.checkForbidenNameU()/];
}
[/if]
[/for]
[/template]


[template private primitiveName(typeName : String)]
[if (typeName.equalsIgnoreCase('EBigDecimal'))]java.math.BigDecimal[elseif (typeName.equalsIgnoreCase('EBoolean'))]Boolean[elseif (typeName.equalsIgnoreCase('EBooleanObject'))]Boolean[elseif (typeName.equalsIgnoreCase('EFeatureMapEntry'))]EFeatureMapEntry[elseif (typeName.equalsIgnoreCase('EInt'))]Integer[elseif (typeName.equalsIgnoreCase('EIntegerObject'))]Integer[elseif (typeName.equalsIgnoreCase('EShortObject'))]Short[elseif (typeName.equalsIgnoreCase('EString'))]String[else][typeName/][/if]
[/template]


[**
 * Generates the name of the type of attribute
 * @param aClass The class to be named.
 */]
[template private genNameForAttribute(attr : EAttribute)]
[if( attr.eType.isPrimitive() )][attr.eType.name.primitiveName()/][elseif(attr.eType.oclIsKindOf(EEnum))][attr.eType.name.toUpperFirst()/][else][attr.eType.name.toUpperFirst()/][/if]
[/template]


[**
 * Generates the name of the type of attribute
 * @param aClass The class to be named.
 */]
[template private genNameForAttribute(attr : EReference)]
[if( attr.eType.isPrimitive() )][attr.eType.name.primitiveName()/][elseif(attr.eType.oclIsKindOf(EEnum))][attr.eType.name.toUpperFirst()/][else][attr.eType.name.toUpperFirst()/][/if]
[/template]

