[comment encoding = UTF-8 /]
[module fileUtilsEcore('http://www.eclipse.org/emf/2002/Ecore')]

[import fr::edf::rd::cs::acceleo::properties::properties /]


[**
 * Generates the name of the interface of class
 * @param aClass The class to be named.
 */]
[template public genNameForInterfaceClass(aClass : EClassifier)]['I' + aClass.name.toUpperFirst()/][/template]


[**
 * Generates the name of the concrete class
 * @param aClass The class to be named.
 */]
[template public genNameForConcreteClass(aClass : EClassifier)][aClass.name.toUpperFirst()/][/template]


[**
 * Generates the file path for the given type (ex: /a/b/c/d/type.java).
 * @param aType The type (class, interface or enumeration most of the time).
 */]
[template public genFilePathForInterfaceClass(aClassifier : EClassifier)]
[aClassifier.getSourceFolder() + aClassifier.packagePath() + '/interfaces/I' + aClassifier.name.toUpperFirst()/].java
[/template]


[**
 * Generates the file path for the given type (ex: /a/b/c/d/type.java).
 * @param aType The type (class, interface or enumeration most of the time).
 */]
[template public genFilePathForConcreteClass(aClassifier : EClassifier)]
[aClassifier.getSourceFolder() + aClassifier.packagePath() + aClassifier.name.toUpperFirst()/].java
[/template]


[**
 * Generates the file path for the given type (ex: /a/b/c/d/type.java).
 * @param aType The type (class, interface or enumeration most of the time).
 */]
[template public genFilePath(aClassifier : EClassifier, classType : String)]
[aClassifier.getSourceFolder() + aClassifier.packagePath() + classType + aClassifier.name.toUpperFirst()/].java
[/template]


[**
 * Computes the package path for the given type (ex: /a/b/c/d/).
 * @param aType The type (class, interface or enumeration most of the time).
 */]
[template private packagePath(aClassifier : EClassifier)]
[aClassifier.ancestors(EPackage).name->reverse()->sep('/', '/', '/')/]
[/template]

[**
 * Returns the package value for the given type (ex: a.b.c.d).
 * @param aType The type (class, interface or enumeration most of the time).
 */]
[template public genPackageValue(aClassifier : EClassifier)]
[aClassifier.ancestors(EPackage).name->reverse()->sep('.')/]
[/template]

[**
 * Generates the copyright header located at the top of each class, interface or enumeration file.
 * @param aType The type used for the generation.
 */]
[template public genCopyrightHeader(aClassifier : EClassifier)]
/**
 * Generated by Nicolas Evreux.
 * All rights reserved.
 */
[/template]

[**
 * Generates the default import block for the given type.
 * @param aType The type
 */]
[template public genDefaultImport(aClassifier : EClassifier)]
// [protected ('for imports')]
import java.util.*;
import [aClassifier.genPackageValue()/].interfaces.*;
// [/protected]
[/template]



[template public log(msg : String, msg2 : String)]
[file ('stdout', true, 'Cp1252')]
LOG: [msg2/][msg/]
[/file]
[/template]