[comment encoding = UTF-8 /]
[**
 * The documentation of the module classJavaFile.
 */]
[module classJavaFileEcore('http://www.eclipse.org/emf/2002/Ecore')]

[import fr::edf::rd::cs::acceleo::files::ecore::fileUtilsEcore /]
[import fr::edf::rd::cs::acceleo::files::ecore::jpaCommonEcore /]
[import fr::edf::rd::cs::acceleo::files::ecore::jpaAnnotationEcore /]
[import fr::edf::rd::cs::acceleo::files::ecore::jpaRepositoryEcore /]
[import fr::edf::rd::cs::acceleo::files::ecore::attributeClassEcore /]


[**
 * The documentation of the template genClassJavaFile.
 * @param aClass
 */]
[template public genClassJavaFile(aClass : EClassifier, aPackage : EPackage)]
[if(not(aClass.isPrimitive()))]

[file (aClass.genFilePathForInterfaceClass(), false, 'UTF-8')]
[aClass.genCopyrightHeader()/]
package [aClass.genPackageValue()/].interfaces;

[aClass.genDefaultImport()/]
/**
 * The documentation of the class [aClass.genNameForInterfaceClass()/]
 *
 * @generated
 */
public [aClass.abstraction()/] interface [aClass.genNameForInterfaceClass()/][aClass.extensionForInterfaceClass()/] {

}
[/file]


[if(not(aClass.name.equalsIgnoreCase('RootObject')))]
[file (aClass.genFilePathForConcreteClass(), false, 'UTF-8')]
[aClass.genCopyrightHeader()/]
package [aClass.genPackageValue()/];

[aClass.genDefaultImport()/]
[aClass.genJpaAnnotImport()/]

['------------------------------'.log('')/]
[aClass.name.log('')/]
/**
 * The documentation of the class [aClass.genNameForConcreteClass()/]
 *
 * @generated
 */
[aClass.genJpaAnnotEntity()/]
public [aClass.abstraction()/] class [aClass.genNameForConcreteClass()/][aClass.inheritanceForConcreteClass()/] implements [aClass.genNameForInterfaceClass()/] {

	[aClass.fieldsForConcreteClass()/]
	[aClass.associationsForConcreteClass()/]
	[aClass.fieldsFromParentForConcreteClass()/]
	/**
	 * The documentation of the constructor.
	 * 
	 * @generated
	 */
	public [aClass.genNameForConcreteClass()/]() {
		super();
	}
    /**
     * The documentation of the constructor.
     *
     * @generated
     */
    public [aClass.genNameForConcreteClass()/](String mRID) {
        super(mRID);
    }
    /**
     * The documentation of the constructor.
     *
     * @generated
     */
    public [aClass.genNameForConcreteClass()/](String mRIDDomain, DomainKindEnum domain) {
        super(mRIDDomain, domain);
    }
    /**
     * The documentation of the constructor.
     *
     * @generated
     */
    public [aClass.genNameForConcreteClass()/](String mRID, String mRIDDomain, DomainKindEnum domain) {
        super(mRID, mRIDDomain, domain);
    }
    [aClass.classBody(aPackage)/]
}
[/file]
[/if]
[if(aClass.isJpaEntityNeeded() and not(aClass.name.equalsIgnoreCase('RootObject') or aClass.name.equalsIgnoreCase('ObjectCardinality') or aClass.name.equalsIgnoreCase('SystemOrSubstation') or aClass.name.equalsIgnoreCase('RevisionHistory')))]
[aClass.genRepositoryJavaFile(aPackage)/]
[/if]
[/if]
[/template]

[template private classBody(aClass : EClassifier, aPackage : EPackage) post(trim())]

[aClass.fieldsAccessorsForConcreteClass()/]
[aClass.fieldsAccessorsFromParentForConcreteClass()/]
[aClass.associationsAccessorsForConcreteClass()/]

[/template]



[template private abstraction(aClass : EClassifier)]
[if ( false and aClass.oclAsType( EClass ).abstract = true )]abstract[/if]
[/template]

[template private inheritanceForConcreteClass(aClass : EClassifier)]
[aClass.extensionForConcreteClass()/][aClass.implementedForConcreteClass()/]
[/template]

[template private extensionForInterfaceClass(aClass : EClassifier)]
[for (aSuperClass : EClass | aClass.oclAsType(EClass).eSuperTypes) before(' extends ') separator(', ')][aSuperClass.genNameForInterfaceClass()/][/for]
[/template]

[template private extensionForConcreteClass(aClass : EClassifier)]
[if( aClass.oclAsType(EClass).eSuperTypes->select( est | not( est.name.startsWith('Ag') ) )->size() > 0 )]
[for ( aSuperClass : EClass | aClass.oclAsType(EClass).eSuperTypes->select( not( name.startsWith( 'Ag' ) ) ) ) before(' extends ') separator(', ')][aSuperClass.genNameForConcreteClass()/][/for]
[else]
 extends RootObject 
[/if]
[/template]

[template private implementedForConcreteClass(aClass : EClassifier)]
[for (anInterface : EClass | aClass.oclAsType(EClass).eSuperTypes->select( aClass : EClass | aClass.interface )) before(' implements ') separator(', ')][anInterface.genNameForInterfaceClass()/][/for]
[/template]

