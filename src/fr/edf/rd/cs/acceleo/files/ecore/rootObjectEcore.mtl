[comment encoding = UTF-8 /]
[module rootObjectEcore('http://www.eclipse.org/emf/2002/Ecore')]

[import fr::edf::rd::cs::acceleo::properties::properties /]

[template public genClassFiles( oclAny : OclAny )]
[genRootObjectClassFile()/]
[genObjectCardinalityClassFile()/]
[genInterfaceClassFile('ObjectCardinality')/]
[genInterfaceClassJPAQueriesRepositoryFile('ObjectCardinality')/]
[genDomainEnumFile()/]
[genClassFile('TypicalObjectLibrary')/]
[genClassFile('SpecificationProject')/]
[genInterfaceClassFile('TypicalObjectLibrary')/]
[genInterfaceClassFile('SpecificationProject')/]
[genInterfaceClassJPAQueriesRepositoryFile('TypicalObjectLibrary')/]
[genInterfaceClassJPAQueriesRepositoryFile('SpecificationProject')/]
[/template]

[**
 * The documentation of the template genClassJavaFile.
 * @param aClass
 */]
[template public genRootObjectClassFile( oclAny : OclAny )]
[file ('fr/edf/rd/cs/internal/entities/scl/RootObject.java', false, 'UTF-8')]
package fr.edf.rd.cs.internal.entities.scl;

import javax.persistence.*;
import fr.edf.rd.cs.internal.entities.scl.interfaces.*;

@MappedSuperclass
public abstract class RootObject {
	
	@Id
	private String mRID;
	
	private String name;
	
	private String aliasName;
	
	private String description;
	
	@Enumerated(javax.persistence.EnumType.STRING) // single Enumeration

	private DomainEnum domain;

	private String domain_mRID;

	public String getmRID() {
		return mRID;
	}

	public void setmRID(String mRID) {
		this.mRID = mRID;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
	public String getAliasName() {
		return aliasName;
	}

	public void setAliasName(String aliasName) {
		this.aliasName = aliasName;
	}
	
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public DomainEnum getDomain() {
		return domain;
	}

	public void setDomain(DomainEnum domain) {
		this.domain = domain;
	}

	public String getDomain_mRID() {
		return domain_mRID;
	}

	public void setDomain_mRID(String domain_mRID) {
		this.domain_mRID = domain_mRID;
	}
}
[/file]
[/template]

[template public genDomainEnumFile( oclAny : OclAny )]
[file ('fr/edf/rd/cs/internal/entities/scl/DomainEnum.java', false, 'UTF-8')]
package fr.edf.rd.cs.internal.entities.scl;
public enum DomainEnum {
	/**
	 * The documentation of the enumeration literal LIBRARY.
	 * 
	 * @generated
	 */
	LIBRARY,
	
	/**
	 * The documentation of the enumeration literal PROJECT.
	 * 
	 * @generated
	 */
	PROJECT
}
[/file]
[/template]

[template public genObjectCardinalityClassFile( oclAny : OclAny )]
[file ('fr/edf/rd/cs/internal/entities/scl/ObjectCardinality.java', false, 'UTF-8')]
package fr.edf.rd.cs.internal.entities.scl;

import fr.edf.rd.cs.internal.entities.scl.interfaces.*;

import javax.persistence.*;

@Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
public class ObjectCardinality extends RootObject 
implements IObjectCardinality {
	
	private String mRIDSource;

	private String mRIDTarget;
	
	private String nameSource;

	private String nameTarget;

	private String multiplicitySource;

	private String multiplicityTarget;

	public String getmRIDSource() {
		return mRIDSource;
	}

	public void setmRIDSource(String mRIDSource) {
		this.mRIDSource = mRIDSource;
	}

	public String getmRIDTarget() {
		return mRIDTarget;
	}

	public void setmRIDTarget(String mRIDTarget) {
		this.mRIDTarget = mRIDTarget;
	}
	
	public String getNameSource() {
		return nameSource;
	}

	public void setNameSource(String nameSource) {
		this.nameSource = nameSource;
	}

	public String getNameTarget() {
		return nameTarget;
	}

	public void setNameTarget(String nameTarget) {
		this.nameTarget = nameTarget;
	}

	public String getMultiplicitySource() {
		return multiplicitySource;
	}

	public void setMultiplicitySource(String multiplicitySource) {
		this.multiplicitySource = multiplicitySource;
	}

	public String getMultiplicityTarget() {
		return multiplicityTarget;
	}

	public void setMultiplicityTarget(String multiplicityTarget) {
		this.multiplicityTarget = multiplicityTarget;
	}

}
[/file]
[/template]

[template public genClassFile( oclAny : OclAny, aClassName: EString )]
[file ('fr/edf/rd/cs/internal/entities/scl/' + aClassName + '.java', false, 'UTF-8')]
package fr.edf.rd.cs.internal.entities.scl;

import fr.edf.rd.cs.internal.entities.scl.interfaces.*;
import javax.persistence.*;

@Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)

public class [aClassName/] extends RootObject 
implements I[aClassName/] {
	
[if(aClassName.equalsIgnoreCase('SpecificationProject'))]
	private String status;
	private String creator;

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}
	public String getCreator() {
		return creator;
	}

	public void setCreator(String creator) {
		this.creator = creator;
	}
[/if]
[if(aClassName.equalsIgnoreCase('TypicalObjectLibrary'))]
	private String version;

	public String getVersion() {
		return version;
	}

	public void setVersion(String version) {
		this.version = version;
	}
[/if]
	
}
[/file]
[/template]


[template public genInterfaceClassFile( oclAny : OclAny, aClassName: EString )]
[file ('fr/edf/rd/cs/internal/entities/scl/interfaces/I' + aClassName + '.java', false, 'UTF-8')]
package fr.edf.rd.cs.internal.entities.scl.interfaces;

import java.util.*;
import fr.edf.rd.cs.internal.entities.scl.interfaces.*;

public  interface I[aClassName/] {

}
[/file]
[/template]


[template public genInterfaceClassJPAQueriesRepositoryFile( oclAny : OclAny, aClassName: EString )]
[file ('fr/edf/rd/cs/internal/entities/scl/repositories/I' + aClassName + 'JPAQueriesRepository.java', false, 'UTF-8')]
package fr.edf.rd.cs.internal.entities.scl.repositories;

import org.springframework.data.jpa.repository.*;
import org.springframework.stereotype.*;
import fr.edf.rd.cs.internal.entities.scl.[aClassName/];

@Repository
public interface I[aClassName/]JPAQueriesRepository extends JpaRepository<[aClassName/], Long> {


}
[/file]
[/template]

