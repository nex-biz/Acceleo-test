[comment encoding = UTF-8 /]
[module rootObjectEcore('http://www.eclipse.org/emf/2002/Ecore')]

[import fr::edf::rd::cs::acceleo::properties::properties /]
[import fr::edf::rd::cs::acceleo::files::ecore::jpaCommonEcore /]

[template public genClassFiles( oclAny : OclAny )]
[genRootObjectClassFile('RootObject')/]
[comment genObjectCardinalityClassFile()/]
[comment genInterfaceClassFile('ObjectCardinality')/]
[genInterfaceClassJPAQueriesRepositoryFile('ObjectCardinality')/]
[comment  genClassFile('SystemOrSubstation')/]
[comment  genInterfaceClassFile('SystemOrSubstation')/]
[genInterfaceClassJPAQueriesRepositoryFile('SystemOrSubstation')/]
[comment genClassFile('TypicalObjectLibrary')/]
[comment genInterfaceClassFile('TypicalObjectLibrary')/]
[comment genInterfaceClassJPAQueriesRepositoryFile('TypicalObjectLibrary')/]
[comment genClassFile('SpecificationProject')/]
[comment genInterfaceClassFile('SpecificationProject')/]
[comment genInterfaceClassJPAQueriesRepositoryFile('SpecificationProject')/]
[comment genClassFile('RevisionHistory')/]
[comment genInterfaceClassFile('RevisionHistory')/]
[genInterfaceClassJPAQueriesRepositoryFile('RevisionHistory')/]
[genInterfaceClassJPAQueriesRepositoryFile('RootObject')/]
[comment genDomainKindEnumFile()/]
[comment genProjectStatusEnumFile()/]

[/template]

[**
 * The documentation of the template genClassJavaFile.
 * @param aClass
 */]
[template public genRootObjectClassFile( oclAny : OclAny, aClassName: EString  )]
[aClassName.log('genRootObjectClassFile ')/]
[file ('fr/edf/rd/cs/internal/entities/scl/RootObject.java', false, 'UTF-8')]
package fr.edf.rd.cs.internal.entities.scl;

import javax.persistence.*;
import java.util.*;
import fr.edf.rd.cs.internal.entities.scl.interfaces.*;
import java.io.Serializable;

@MappedSuperclass
public abstract class RootObject implements Serializable {
	
	@Id
	private String mRID;

	private String mRIDDomain;

	private String name;
	
	private String aliasName;

	private String description;

	@Enumerated(javax.persistence.EnumType.STRING) // single Enumeration

	private DomainKindEnum domain;

    private String implementsTypicalObject;

    public RootObject() {
        this.mRID = UUID.randomUUID().toString();
    }

    public RootObject(String mRID) {
        this.mRID = mRID;
    }

    public RootObject(String mRIDDomain, DomainKindEnum domain) {
        this();
 		this.mRIDDomain = mRIDDomain;
 		this.domain = domain;
    }

    public RootObject(String mRID, String mRIDDomain, DomainKindEnum domain) {
        if(mRID==null) mRID = UUID.randomUUID().toString();
		this.mRID = mRID;
        if(domain == DomainKindEnum.LIBRARY_MODEL) {
			this.mRID = this.mRID + "__" + mRIDDomain;
		}
        this.mRIDDomain = mRIDDomain;
        this.domain = domain;
    }

	public String getMRID() {
        String['['/][']'/]strmRID = mRID.split("__");
		return strmRID['['/]0[']'/];
	}

	public void setMRID(String mRID) {
		this.mRID = mRID;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
	public String getAliasName() {
		return aliasName;
	}

	public void setAliasName(String aliasName) {
		this.aliasName = aliasName;
	}
	
	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public DomainKindEnum getDomain() {
		return domain;
	}

	public void setDomain(DomainKindEnum domain) {
		this.domain = domain;
	}

	public String getMRIDDomain() {
		return mRIDDomain;
	}

	public void setMRIDDomain(String mRIDDomain) {
		this.mRIDDomain = mRIDDomain;
	}

    public String getImplementsTypicalObject() {
        return implementsTypicalObject;
    }

    public void setImplementsTypicalObject(String implementsTypicalObject) {
        this.implementsTypicalObject = implementsTypicalObject;
    }
}
[/file]
[/template]

[template public genDomainKindEnumFile( oclAny : OclAny )]
[file ('fr/edf/rd/cs/internal/entities/scl/DomainKindEnum.java', false, 'UTF-8')]
package fr.edf.rd.cs.internal.entities.scl;
public enum DomainKindEnum {
	/**
	 * The documentation of the enumeration literal LIBRARYMODEL.
	 *
	 * @generated
	 */
	 LIBRARY_MODEL,

	/**
	 * The documentation of the enumeration literal LIBRARY.
	 * 
	 * @generated
	 */
	LIBRARY,
	
	/**
	 * The documentation of the enumeration literal PROJECT.
	 * 
	 * @generated
	 */
	PROJECT
}
[/file]
[/template]

[template public genProjectStatusEnumFile( oclAny : OclAny )]
[file ('fr/edf/rd/cs/internal/entities/scl/ProjectStatusEnum.java', false, 'UTF-8')]
package fr.edf.rd.cs.internal.entities.scl;
public enum ProjectStatusEnum {
	/**
	 * The documentation of the enumeration literal INITIALIZED.
	 *
	 * @generated
	 */
	INITIALIZED,

	/**
	 * The documentation of the enumeration literal DRAFT.
	 *
	 * @generated
	 */
	DRAFT,

	/**
	 * The documentation of the enumeration literal VALIDATED.
	 *
	 * @generated
	 */
	VALIDATED,

    /**
     * The documentation of the enumeration literal DEPRECATED.
     *
     * @generated
     */
    DEPRECATED
}
[/file]
[/template]

[template public genObjectCardinalityClassFile( oclAny : OclAny )]
[file ('fr/edf/rd/cs/internal/entities/scl/ObjectCardinality.java', false, 'UTF-8')]
package fr.edf.rd.cs.internal.entities.scl;

import fr.edf.rd.cs.internal.entities.scl.interfaces.*;

import javax.persistence.*;

@Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
public class ObjectCardinality extends RootObject 
implements IObjectCardinality {
	
	private String mRIDSource;

	private String mRIDTarget;
	
	private String nameSource;

	private String nameTarget;

	private String multiplicitySource;

	private String multiplicityTarget;

	public ObjectCardinality() {
		super();
	}

    public ObjectCardinality(String mRID) {
        super(mRID);
    }

    public ObjectCardinality(String mRIDDomain, DomainKindEnum domain) {
        super(mRIDDomain, domain);
    }

    public ObjectCardinality(String mRID, String mRIDDomain, DomainKindEnum domain) {
        super(mRID, mRIDDomain, domain);
    }

	public String getMRIDSource() {
		return mRIDSource;
	}

	public void setMRIDSource(String mRIDSource) {
		this.mRIDSource = mRIDSource;
	}

	public String getMRIDTarget() {
		return mRIDTarget;
	}

	public void setMRIDTarget(String mRIDTarget) {
		this.mRIDTarget = mRIDTarget;
	}
	
	public String getNameSource() {
		return nameSource;
	}

	public void setNameSource(String nameSource) {
		this.nameSource = nameSource;
	}

	public String getNameTarget() {
		return nameTarget;
	}

	public void setNameTarget(String nameTarget) {
		this.nameTarget = nameTarget;
	}

	public String getMultiplicitySource() {
		return multiplicitySource;
	}

	public void setMultiplicitySource(String multiplicitySource) {
		this.multiplicitySource = multiplicitySource;
	}

	public String getMultiplicityTarget() {
		return multiplicityTarget;
	}

	public void setMultiplicityTarget(String multiplicityTarget) {
		this.multiplicityTarget = multiplicityTarget;
	}

}
[/file]
[/template]

[template public genClassFile( oclAny : OclAny, aClassName: EString )]
[file ('fr/edf/rd/cs/internal/entities/scl/' + aClassName + '.java', false, 'UTF-8')]
package fr.edf.rd.cs.internal.entities.scl;

import fr.edf.rd.cs.internal.entities.scl.interfaces.*;
import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Date;

@Entity
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)

public class [aClassName/] extends RootObject 
implements I[aClassName/] {

[if(aClassName.equalsIgnoreCase('SystemOrSubstation'))]

	private String region;

	@ManyToMany(fetch = FetchType.LAZY) // multiple Association  upperBound -1 : oppositeUpperBound 1
	private List<SpecificationProject> specificationProject = new ArrayList<>();

	public String getRegion() {
		return region;
	}

	public void setRegion(String region) {
		this.region = region;
	}

    public List<SpecificationProject> getSpecificationProject() {
    	return this.specificationProject;
    }

    public void setSpecificationProject(List<SpecificationProject> newSpecificationProject) {
    	this.specificationProject = newSpecificationProject;
    }

[/if]

[if(aClassName.equalsIgnoreCase('SpecificationProject'))]

    private Date creationDate;

	private String revision;

	@Enumerated(javax.persistence.EnumType.STRING) // single Enumeration
	private ProjectStatusEnum status;

	private String version;

	@ManyToMany(fetch = FetchType.LAZY) // multiple Association  upperBound 1 : oppositeUpperBound -1
	private List<SystemOrSubstation> parentSystemOrSubstation = new ArrayList<>();

	@ManyToMany(fetch = FetchType.LAZY) // multiple Association  upperBound -1 : oppositeUpperBound 1
	private List<TypicalObjectLibrary> refersToTypicalObjectLibrary = new ArrayList<>();

	@ManyToMany(fetch = FetchType.LAZY) // multiple Association  upperBound -1 : oppositeUpperBound 1
	private List<Substation> substation = new ArrayList<>();

	@ManyToMany(fetch = FetchType.LAZY) // multiple Association  upperBound -1 : oppositeUpperBound 1
	private List<RevisionHistory> revisionHistory = new ArrayList<>();

    public Date getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }

	public String getRevision() {
		return revision;
	}

	public void setRevision(String revision) {
		this.revision = revision;
	}

    public ProjectStatusEnum getStatus() {
        return status;
    }

    public void setStatus(ProjectStatusEnum status) {
        this.status = status;
    }

    public String getVersion() {
        return version;
    }

    public void setVersion(String version) {
        this.version = version;
    }

	public List<TypicalObjectLibrary> getRefersToTypicalObjectLibrary() {
		return this.refersToTypicalObjectLibrary;
	}
	
	public void setRefersToTypicalObjectLibrary(List<TypicalObjectLibrary> newRefersToTypicalObjectLibrary) {
		this.refersToTypicalObjectLibrary = newRefersToTypicalObjectLibrary;
	}

    public List<Substation> getSubstation() {
    	return this.substation;
    }

    public void setSubstation(List<Substation> newSubstation) {
    	this.substation = newSubstation;
    }

    public List<SystemOrSubstation> getParentSystemOrSubstation() {
    	return this.parentSystemOrSubstation;
    }

    public void setParentSystemOrSubstation(List<SystemOrSubstation> newParentSystemOrSubstation) {
    	this.parentSystemOrSubstation = newParentSystemOrSubstation;
    }

    public List<RevisionHistory> getRevisionHistory() {
        return this.revisionHistory;
    }

    public void setRevisionHistory(List<RevisionHistory> newRevisionHistory) {
        this.revisionHistory = newRevisionHistory;
    }

[/if]
[if(aClassName.equalsIgnoreCase('TypicalObjectLibrary'))]

    private Date creationDate;

	private String revision;

	private String version;

	@Enumerated(javax.persistence.EnumType.STRING) // single Enumeration
	private ProjectStatusEnum status;

	@ManyToMany(fetch = FetchType.LAZY) // multiple Association  upperBound -1 : oppositeUpperBound 1
	private List<SpecificationProject> referredBySpecificationProject = new ArrayList<>();

	@ManyToMany(fetch = FetchType.LAZY) // multiple Association  upperBound -1 : oppositeUpperBound 1
	private List<RevisionHistory> revisionHistory = new ArrayList<>();

    public Date getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(Date creationDate) {
        this.creationDate = creationDate;
    }

	public String getRevision() {
		return revision;
	}

	public void setRevision(String revision) {
		this.revision = revision;
	}

    public String getVersion() {
    	return this.version;
    }

    public void setVersion(String newVersion) {
    	this.version = newVersion;
    }

    public ProjectStatusEnum getStatus() {
        return status;
    }

    public void setStatus(ProjectStatusEnum status) {
        this.status = status;
    }

	public List<SpecificationProject> getReferredBySpecificationProject() {
		return this.referredBySpecificationProject;
	}
	
	public void setReferredBySpecificationProject(List<SpecificationProject> newReferredBySpecificationProject) {
		this.referredBySpecificationProject = newReferredBySpecificationProject;
	}

    public List<RevisionHistory> getRevisionHistory() {
        return this.revisionHistory;
    }

    public void setRevisionHistory(List<RevisionHistory> newRevisionHistory) {
        this.revisionHistory = newRevisionHistory;
    }

[/if]

[if(aClassName.equalsIgnoreCase('RevisionHistory'))]

	private String revision;

	private String version;

	private String what;

	private String modificationDate;

	private String who;

	private String why;

    public String getRevision() {
    	return this.revision;
    }

    public void setRevision(String newRevision) {
    	this.revision = newRevision;
    }

    public String getVersion() {
    	return this.version;
    }

    public void setVersion(String newVersion) {
    	this.version = newVersion;
    }

    public String getWhat() {
    	return this.what;
    }

    public void setWhat(String newWhat) {
    	this.what = newWhat;
    }

    public String getModificationDate() {
    	return this.modificationDate;
    }

    public void setModificationDate(String newModificationDate) {
    	this.modificationDate = newModificationDate;
    }

    public String getWho() {
    	return this.who;
    }

     public void setWho(String newWho) {
    	this.who = newWho;
    }

    public String getWhy() {
    	return this.why;
    }

    public void setWhy(String newWhy) {
    	this.why = newWhy;
    }

[/if]

    public [aClassName/]() {
        super();
    }

    public [aClassName/](String mRID) {
        super(mRID);
    }

    public [aClassName/](String mRIDDomain, DomainKindEnum domain) {
        super(mRIDDomain, domain);
    }

    public [aClassName/](String mRID, String mRIDDomain, DomainKindEnum domain) {
        super(mRID, mRIDDomain, domain);
    }
}
[/file]
[/template]


[template public genInterfaceClassFile( oclAny : OclAny, aClassName: EString )]
[file ('fr/edf/rd/cs/internal/entities/scl/interfaces/I' + aClassName + '.java', false, 'UTF-8')]
package fr.edf.rd.cs.internal.entities.scl.interfaces;

import java.util.*;
import fr.edf.rd.cs.internal.entities.scl.interfaces.*;

public  interface I[aClassName/] {

}
[/file]
[/template]


[template public genInterfaceClassJPAQueriesRepositoryFile( oclAny : OclAny, aClassName: EString )]
[aClassName.log('genInterfaceClassJPAQueriesRepositoryFile ')/]
[file ('fr/edf/rd/cs/internal/entities/scl/repositories/I' + aClassName + 'JPAQueriesRepository.java', false, 'UTF-8')]
package fr.edf.rd.cs.internal.entities.scl.repositories;

import org.springframework.data.jpa.repository.*;
import org.springframework.stereotype.*;
import fr.edf.rd.cs.internal.entities.scl.[aClassName/];

[if(aClassName.equalsIgnoreCase('RootObject'))]
import fr.edf.rd.cs.internal.entities.scl.DomainKindEnum;
import org.springframework.data.repository.NoRepositoryBean;
import java.util.List;
import java.util.Optional;

@NoRepositoryBean
public interface IRootObjectJPAQueriesRepository<T> extends JpaRepository<T, String> {

  @Query("SELECT tab FROM #{#entityName} tab " +
          " WHERE domain = ?1 ")
  public List<T> findByDomain(DomainKindEnum domain);

  @Query("SELECT tab FROM #{#entityName} tab " +
          " WHERE mriddomain = ?1 ")
  public List<T> findByMriddomain(String mriddomain);

  @Query("SELECT tab FROM #{#entityName} tab " +
          " WHERE substring(mrid,1,36) = ?1 AND mriddomain = ?2 ")
  public Optional<T> findByMridAndByMriddomain(String mrid, String mriddomain);

[else]
[if(aClassName.equalsIgnoreCase('ObjectCardinality') or aClassName.equalsIgnoreCase('SystemOrSubstation') or aClassName.equalsIgnoreCase('RevisionHistory'))]
import java.util.Optional;
[/if]

@Repository
public interface I[aClassName/]JPAQueriesRepository extends IRootObjectJPAQueriesRepository<[aClassName/]> {

[if(aClassName.equalsIgnoreCase('ObjectCardinality'))]
  @Query("SELECT tab FROM #{#entityName} tab " +
          " WHERE mridsource = ?1 AND mridtarget = ?2 AND mriddomain = ?3")
  public Optional<ObjectCardinality> findByMridSourceAndByMridTargetAndByMriddomain(String mridsource, String mridtarget, String mriddomain);
[/if]

[if(aClassName.equalsIgnoreCase('SystemOrSubstation'))]
  @Query("SELECT tab FROM #{#entityName} tab " +
          " WHERE name = ?1 AND mriddomain = ?2")
  public Optional<SystemOrSubstation> findByNameAndByMriddomain(String name, String mriddomain);
[/if]

[if(aClassName.equalsIgnoreCase('RevisionHistory'))]
  @Query("SELECT tab FROM #{#entityName} tab " +
          " WHERE version = ?1 AND revision = ?2 AND mriddomain = ?3")
  public Optional<RevisionHistory> findByVersionAndByRevisionAndByMriddomain(String version, String revision, String mriddomain);
[/if]

[/if]

}
[/file]
[/template]

